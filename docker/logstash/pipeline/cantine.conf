input {
  file {
    id => "cantine-csv"
    path => "/usr/share/logstash/data/cantine.csv"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/.sincedb_cantine"
  }
}

filter {
  csv {
    separator => ","
    skip_header => true
    autogenerate_column_names => false
    columns => [
      "age",
      "classe",
      "type_repas",
      "calories",
      "cout_repas",
      "freq_consommation",
      "satisfaction",
      "recommande"
    ]
  }

  mutate {
    convert => {
      "age" => "integer"
      "calories" => "float"
      "cout_repas" => "float"
      "freq_consommation" => "integer"
      "satisfaction" => "integer"
      "recommande" => "integer"
    }
  }

  ruby {
    code => "event.set('recommande', [true, 1, '1', 'true'].include?(event.get('recommande')) ? true : false)"
  }

  # Assurer un champ temporel typÃ© pour Kibana/Grafana
  ruby {
    code => "event.set('@timestamp', LogStash::Timestamp.now)"
  }

  mutate { remove_field => ["@version"] }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "cantine_data"
  }
  stdout { codec => rubydebug }
}
